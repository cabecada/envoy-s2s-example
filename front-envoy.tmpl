static_resources:
  listeners:
  - address:
      socket_address:
        address: 0.0.0.0
        port_value: 80
    filter_chains:
    - filters:
      - name: envoy.http_connection_manager
        config:
          tracing:
            operation_name: egress
          codec_type: auto
          stat_prefix: ingress_http
          access_log:
            - name: envoy.file_access_log
              config:
                path: "/var/log/access.log"
          route_config:
            name: local_route
            virtual_hosts:
            - name: backend
              domains:
              - "*"
              routes:
              # Prefix-based routing with rewrite
              - match:
                  prefix: "/service1/"
                route:
                  cluster: service1
                  prefix_rewrite: "/"
                  host_rewrite: "service1"
              - match:
                  prefix: "/service2/"
                route:
                  cluster: service2
                  prefix_rewrite: "/"
                  host_rewrite: "service2"

              # Prefix-based routing
              - match:
                  prefix: "/service/1"
                route:
                  cluster: service1
                  # This prevents showing error to a client, but does not exclude sick node from request
                  # https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/route/route.proto#envoy-api-msg-route-routeaction-retrypolicy
                  # https://www.envoyproxy.io/docs/envoy/latest/configuration/http_filters/router_filter#x-envoy-retry-on
                  retry_policy:
                    retry_on: gateway-error
                    num_retries: 2
                    per_try_timeout: 2s
                decorator:
                  operation: checkAvailability
              - match:
                  prefix: "/trace/1"
                route:
                  cluster: service1
                  retry_policy:
                    retry_on: gateway-error
                    num_retries: 2
                    per_try_timeout: 2s
                decorator:
                  operation: checkAvailability
              - match:
                  prefix: "/service/2"
                route:
                  cluster: service2
                  retry_policy:
                    retry_on: gateway-error
                    num_retries: 2
                    per_try_timeout: 2s
                decorator:
                  operation: checkStock
              - match:
                  prefix: "/trace/2"
                route:
                  cluster: service2
                  retry_policy:
                    retry_on: gateway-error
                    num_retries: 2
                    per_try_timeout: 2s
                decorator:
                  operation: checkStock

          http_filters:
          - name: envoy.router
            config:
              dynamic_stats: {value: true}
              upstream_log:
                name: envoy.file_access_log
                config:
                  path: "/var/log/upstream.log"
  - address:
      socket_address:
        address: 0.0.0.0
        port_value: 8001
    filter_chains:
    - filters:
      - name: envoy.http_connection_manager
        config:
          codec_type: auto
          stat_prefix: ingress_http_metrics
          route_config:
            name: metrics
            virtual_hosts:
            - name: metrics
              domains:
              - "*"
              routes:
              # Prefix-based routing with rewrite
              - match:
                  prefix: "/statsd"
                route:
                  cluster: statsd_in
                  prefix_rewrite: "/metrics"
          http_filters:
          - name: envoy.router
            config: {}

  clusters:
  - name: service1
    connect_timeout: 0.250s
    type: EDS
    lb_policy: round_robin
    http2_protocol_options: {}
    eds_cluster_config:
      eds_config:
        api_config_source:
          api_type: REST_LEGACY
          cluster_names: [xds_cluster]
          refresh_delay:
            seconds: 5
    # Eventually (after several fail responses) temporary excludes sick nodes from cluster
    # https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/cluster/outlier_detection.proto
    outlier_detection: {}
  - name: service2
    connect_timeout: 0.250s
    type: EDS
    lb_policy: round_robin
    http2_protocol_options: {}
    eds_cluster_config:
      eds_config:
        api_config_source:
          api_type: REST_LEGACY
          cluster_names: [xds_cluster]
          refresh_delay:
            seconds: 5
    outlier_detection: {}
  - name: jaeger
    connect_timeout: 1s
    type: EDS
    lb_policy: round_robin
    eds_cluster_config:
      eds_config:
        api_config_source:
          api_type: REST_LEGACY
          cluster_names: [xds_cluster]
          refresh_delay:
            seconds: 5
  - name: statsd_in
    connect_timeout: 0.25s
    type: strict_dns
    lb_policy: ROUND_ROBIN
    hosts: [{ socket_address: { address: "statsd", port_value: 9102 }}]
  - name: statsd_out
    connect_timeout: 0.25s
    type: strict_dns
    lb_policy: ROUND_ROBIN
    hosts: [{ socket_address: { address: "statsd", port_value: 9125 }}]
  - name: xds_cluster
    connect_timeout: 0.25s
    type: strict_dns
    lb_policy: ROUND_ROBIN
    # http2_protocol_options: {}
    {{ $discovery := parseUrl .Env.DISCOVERY_URL }}
    {{ $discoveryArray := split $discovery.Host ":" }}
    hosts: [{ socket_address: { address: "{{ index $discoveryArray 0 }}", port_value: {{ index $discoveryArray 1 }} }}]
tracing:
  http:
    name: envoy.zipkin
    config:
      collector_cluster: jaeger
      collector_endpoint: "/api/v1/spans"
stats_sinks:
  name: envoy.statsd
  config:
    tcp_cluster_name: statsd_out
admin:
  access_log_path: "/dev/null"
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 10000
