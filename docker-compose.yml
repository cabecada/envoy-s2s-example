version: '2'
services:

  # --------------------------------------------------
  # Front Proxy
  # --------------------------------------------------
  front-envoy:
    build:
      context: .
      dockerfile: Dockerfile-envoy
    volumes:
      - ./front-envoy.tmpl:/etc/envoy.tmpl
    environment:
      - SERVICE_NODE=front-proxy
      - SERVICE_CLUSTER=front-proxy
      - DISCOVERY_URL=${DISCOVERY_URL}
    expose:
      - "80"
      - "8001"
    ports:
      - "8000:80"
      - "8001:8001"
    networks:
      envoymesh: {}

  # --------------------------------------------------
  # Service 1
  # --------------------------------------------------
  local-envoy1:
    build:
      context: .
      dockerfile: Dockerfile-envoy
    volumes:
      - ./service1-envoy.tmpl:/etc/envoy.tmpl
    environment:
      - SERVICE_NODE=service1-proxy
      - SERVICE_CLUSTER=service1
      - DISCOVERY_URL=${DISCOVERY_URL}
    expose:
      - "80"
    networks:
      envoymesh: {}
      servicepod1:
        aliases:
          - local-proxy

  service1:
    build:
      context: .
      dockerfile: Dockerfile-service
    depends_on:
      - local-envoy1
    environment:
      - SERVICE_NAME=1
    networks:
      servicepod1:
        aliases:
          - local-service

  registrator1:
    image: javajefe/lyft-discovery-registrator
    depends_on:
      - local-envoy1
      - service1
    environment:
      - ENVIRONMENT=DOCKER
      - DISCOVERY_URL=${DISCOVERY_URL}
      - PROXY_NETWORK_ALIAS=local-envoy1
      - PROXY_HOST_PORT=80
      - SERVICE_NAME=service1
      - REFRESH_INTERVAL=5
    networks:
      envoymesh: {}


  # --------------------------------------------------
  # Service 2 (first node)
  # --------------------------------------------------
  local-envoy2:
    build:
      context: .
      dockerfile: Dockerfile-envoy
    volumes:
      - ./service2-envoy.tmpl:/etc/envoy.tmpl
    environment:
      - SERVICE_NODE=service2-proxy
      - SERVICE_CLUSTER=service2
      - DISCOVERY_URL=${DISCOVERY_URL}
    expose:
      - "80"
    networks:
      envoymesh: {}
      servicepod2:
        aliases:
          - local-proxy

  service2:
    build:
      context: .
      dockerfile: Dockerfile-service
    depends_on:
      - local-envoy2
    environment:
      - SERVICE_NAME=2
    networks:
      servicepod2:
        aliases:
          - local-service

  registrator2:
    image: javajefe/lyft-discovery-registrator
    depends_on:
      - local-envoy2
      - service2
    environment:
      - ENVIRONMENT=DOCKER
      - DISCOVERY_URL=${DISCOVERY_URL}
      - PROXY_NETWORK_ALIAS=local-envoy2
      - PROXY_HOST_PORT=80
      - SERVICE_NAME=service2
      - REFRESH_INTERVAL=5
    networks:
      envoymesh: {}


  # --------------------------------------------------
  # Service 2 (second node)
  # --------------------------------------------------
  local-envoy2a:
    build:
      context: .
      dockerfile: Dockerfile-envoy
    volumes:
      - ./service2-envoy.tmpl:/etc/envoy.tmpl
    environment:
      - SERVICE_NODE=service2a-proxy
      - SERVICE_CLUSTER=service2
      - DISCOVERY_URL=${DISCOVERY_URL}
    expose:
      - "80"
    networks:
      envoymesh: {}
      servicepod2a:
        aliases:
          - local-proxy

  service2a:
    build:
      context: .
      dockerfile: Dockerfile-service
    depends_on:
      - local-envoy2a
    environment:
      - SERVICE_NAME=2a
    networks:
      servicepod2a:
        aliases:
          - local-service

  registrator2a:
    image: javajefe/lyft-discovery-registrator
    depends_on:
      - local-envoy2a
      - service2a
    environment:
      - ENVIRONMENT=DOCKER
      - DISCOVERY_URL=${DISCOVERY_URL}
      - PROXY_NETWORK_ALIAS=local-envoy2a
      - PROXY_HOST_PORT=80
      - SERVICE_NAME=service2
      - REFRESH_INTERVAL=5
    networks:
      envoymesh: {}


  # --------------------------------------------------
  # Lyft Service Discovery
  # --------------------------------------------------
  discovery:
    image: javajefe/lyft-discovery
    environment:
      - BACKEND_STORAGE=InMemory
      - APPLICATION_ENV=production
    expose:
      - "8080"
    ports:
      - "8080:8080"
    networks:
      envoymesh: {}


  # --------------------------------------------------
  # Tracing (Jaeger + ElasticSearch)
  # --------------------------------------------------

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.3.0
    container_name: elasticsearch
    environment:
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - 9200:9200
    networks:
      tracing: {}

  kibana:
    image: docker.elastic.co/kibana/kibana-oss:6.3.0
    environment:
      SERVER_NAME: kibana
      ELASTICSEARCH_URL: http://elasticsearch:9200
    ports:
      - 5601:5601
    networks:
      tracing: {}

  registrator-jaeger:
    image: javajefe/lyft-discovery-registrator
    environment:
      - ENVIRONMENT=DOCKER
      - DISCOVERY_URL=${DISCOVERY_URL}
      - PROXY_NETWORK_ALIAS=jaeger-collector
      - PROXY_HOST_PORT=9411
      - SERVICE_NAME=jaeger
      - REFRESH_INTERVAL=5
    networks:
      envoymesh: {}

  jaeger-collector:
    image: jaegertracing/jaeger-collector
    command: ["/go/bin/collector-linux", "--es.server-urls=http://elasticsearch:9200", "--es.num-shards=1", "--span-storage.type=elasticsearch", "--log-level=info"]
    environment:
      - SPAN_STORAGE_TYPE=elasticsearch
      - COLLECTOR_ZIPKIN_HTTP_PORT=9411
    expose:
      - "14269"
      - "14268"
      - "14267"
      - "9411"
    restart: on-failure
    networks:
      envoymesh: {}
      tracing: {}

  jaeger-dependencies:
    image: jaegertracing/spark-dependencies
    environment:
      - STORAGE=elasticsearch
      - ES_NODES=http://elasticsearch:9200
      - ES_USERNAME=
      - ES_PASSWORD=
    restart: on-failure
    networks:
      tracing: {}

  jaeger-query:
    image: jaegertracing/jaeger-query
    command: ["/go/bin/query-linux", "--es.server-urls=http://elasticsearch:9200", "--span-storage.type=elasticsearch", "--log-level=debug", "--query.static-files=/go/jaeger-ui/"]
    environment:
      - SPAN_STORAGE_TYPE=elasticsearch
      - no_proxy=localhost
    expose:
      - "16686"
      - "16687"
    ports:
      - "16686:16686"
    restart: on-failure  
    networks:
      tracing: {}


networks:
  envoymesh: {}
  servicepod1: {}
  servicepod2: {}
  servicepod2a: {}
  tracing: {}
